---
export interface Props {
  /** The latitude, in degrees. */
  latitude: number
  /** The longitude, in degrees. */
  longitude: number
  /** The altitude of the camera relative to the elevation of the center of the map. https://developer.apple.com/documentation/mapkitjs/map/3257749-cameradistance */
  cameradistance: number
  /** A DOM element, or the ID of a DOM element, to use as your mapâ€™s container.  https://developer.apple.com/documentation/mapkitjs/map/2973920-mapkit_map#parameters */
  container: string
  interactive?: boolean
  /**
   * The type of map to display.

   * `Hybrid` A satellite image of the area with road and road name layers on top.

   * `MutedStandard` A street map that emphasizes your data over the underlying map details.

   * `Satellite` A satellite image of the area.

   * `Standard` A street map that shows the position of all roads and some road names.
   */
  maptype?: string
  containerstyle?: string
}

const { 
  latitude, longitude,
  cameradistance,
  container,
  interactive,
  maptype = "Standard",
  containerstyle = "height: 61.8vh"
} = Astro.props

---

<mapkit-map
  data-latitude={latitude}
  data-longitude={longitude}
  data-cameradistance={cameradistance}
  data-container={container}
  data-interactive={interactive}
  data-maptype={maptype}
  data-containerstyle={containerstyle}
>
<div id={container} style={containerstyle}></div>

{/* Astro specific way to pull in MapKit JS, `is:inline`:  https://docs.astro.build/en/reference/directives-reference/#isinline */}
<script is:inline src="https://cdn.apple-mapkit.com/mk/5.x.x/mapkit.js"></script>

<script>

  class MapKitMap extends HTMLElement {
    constructor() {
      super()

      mapkit.init({
            authorizationCallback: function(done) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", "https://roblabs.com/services/jwt");
                xhr.addEventListener("load", function() {
                    done(this.responseText);
                });
                xhr.send();
            }
        });

        var map = new mapkit.Map(this.dataset.container)        
        map.center = new mapkit.Coordinate(Number(this.dataset.latitude), Number(this.dataset.longitude))
        map.cameraDistance = Number(this.dataset.cameradistance)
        
        // console.log(this.dataset)
        var maptype = this.dataset.maptype

        switch (maptype) {
          case "Hybrid":
            map.mapType = mapkit.Map.MapTypes.Hybrid
            break;

          case "MutedStandard":
            map.mapType = mapkit.Map.MapTypes.MutedStandard
            break;

          case "Satellite":
            map.mapType = mapkit.Map.MapTypes.Satellite
            break;
        
          default:
            map.mapType = mapkit.Map.MapTypes.Standard
            break;
        }

        if(JSON.parse(this.dataset.interactive) === false) {
          // https://developer.apple.com/documentation/mapkitjs/mapconstructoroptions
          // set MapKit JS values to disable interactivity

          /** A Boolean value that determines whether the user may zoom in and out on the map using pinch gestures or the zoom control. */
          map.isZoomEnabled = false

          /** A Boolean value that determines whether to display a control for zooming in and zooming out on a map. */
          map.showsZoomControl = false
          
          /** A Boolean value that determines whether the user may rotate the map using the compass control or a rotate gesture. */
          map.isRotationEnabled = false

          /** A Boolean value that determines whether to display a control that lets users choose the map type. */
          map.showsMapTypeControl = false

          /**  A Boolean value that determines whether the user may scroll the map with a pointing device or gestures on a touchscreen. */
          map.isScrollEnabled = false
        }

        map.addEventListener("region-change-end", function(event)    {
          console.log(`cameraDistance: ${mapkit.maps[0].cameraDistance.toFixed(3)}`
          );
        });
    }
  }

  customElements.define("mapkit-map", MapKitMap);
</script>